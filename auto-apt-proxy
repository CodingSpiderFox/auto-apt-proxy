#!/bin/sh

set -e

tmpfile=$(mktemp)
cleanup() {
  rm -f "$tmpfile"
}
trap cleanup INT EXIT TERM

hit() {
  /usr/lib/apt/apt-helper \
    -o Acquire::http::Proxy=DIRECT \
    download-file "$@" "$tmpfile" 2>&1
}

detect_apt_cacher() {
  local ip="$1"
  local proxy=http://$ip:3142
  hit -o "Acquire::http::Proxy::${ip}=DIRECT" "$proxy" >/dev/null 2>&1 || true;
  if [ -s "$tmpfile" ] && grep -q -i '<title>Apt-cacher' "$tmpfile"; then
    echo "$proxy"
    return 0
  fi
  return 1
}

detect_apt_cacher_ng() {
  local ip="$1"
  local proxy=http://$ip:3142
  if hit -o "Acquire::http::Proxy::${ip}=DIRECT" "$proxy" | grep -q -i '406.*usage.information'; then
    echo "$proxy"
    return 0
  fi
  return 1
}

detect_approx() {
  local ip="$1"
  local proxy=http://$ip:9999
  hit -o "Acquire::http::Proxy::${ip}=DIRECT" "$proxy" >/dev/null 2>&1 || true;
  if [ -s "$tmpfile" ] && grep -q -i '<title>approx\s*server</title>' "$tmpfile"; then
    echo "$proxy"
    return 0
  fi
  return 1
}

detect() {
  if which ip >/dev/null; then
    gateway=$(ip route | awk '/default/ { print($3) }')
  else
    gateway=''
  fi
  for ip in 127.0.0.1 $gateway; do
    detect_apt_cacher_ng "$ip" && return 0
    detect_approx "$ip"        && return 0
    detect_apt_cacher "$ip"    && return 0
  done
  return 0
}

if [ $# -eq 0 ]; then
  detect
else
  # APT mode: first argument is an URI
  case "$1" in
    ftp://*|http://*|https://*|file://*)
      detect
      ;;
    *)
      proxy=$(detect || true)
      if [ -n "$proxy" ]; then
        export http_proxy="$proxy"
        export HTTP_PROXY="$proxy"
      fi
      exec "$@"
  esac
fi
